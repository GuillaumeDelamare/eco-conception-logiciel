package fr.guillaume.sorter;

import java.util.ArrayList;

import fr.guillaume.objectgenerator.Generator;
import fr.guillaume.objectgenerator.IntegerGenrator;
import fr.guillaume.sorter.sortthreads.AbstractSortThread;
import fr.guillaume.sorter.sortthreads.QuickSortThread;

public class Sorter {
	Generator<?> generator;
	AbstractSortThread sortThread;
	
	public Sorter() {
		generator = new IntegerGenrator(100);
		
	}
	
	public static void main(String[] args) {
		IntegerGenrator generator = new IntegerGenrator(100);
		
		generator.start();
		
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		ArrayList<Integer> al = generator.getAll();
		
		System.out.println(al);
		
		Integer[] o = null;
		al.toArray(o);
		Comparable<?>[] tab=null;
		if (o instanceof Comparable<?>[]) {
			tab = (Comparable<?>[]) o;
		}
		
		AbstractSortThread sortThread = new QuickSortThread(tab);
		
		sortThread.start();
		
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		System.out.println(o);
	}
}